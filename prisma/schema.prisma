datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id         Int            @id @default(autoincrement())
  name       String
  email      String         @unique
  password   String
  teaches    Class[]        @relation(name: "teaches")
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @default(now())
  classes    ClassStudent[] @relation(name: "classes_joined")
  Attendance Attendance[]
  Answer     Answer[]
}

model Class {
  id          Int            @id @default(autoincrement())
  teacherId   Int
  teacher     User           @relation(name: "teaches", fields: [teacherId], references: [id])
  name        String
  description String         @default("")
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @default(now())
  students    ClassStudent[] @relation(name: "class_members")
  Schedule    Schedule[]
  Assignment  Assignment[]
}

model ClassStudent {
  id        Int      @id @default(autoincrement())
  studentId Int
  student   User     @relation(name: "classes_joined", fields: [studentId], references: [id])
  classId   Int
  class     Class    @relation(name: "class_members", fields: [classId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Schedule {
  id         Int          @id @default(autoincrement())
  classId    Int
  class      Class        @relation(fields: [classId], references: [id])
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @default(now())
  Attendance Attendance[]
}

model Attendance {
  id         Int      @id @default(autoincrement())
  scheduleId Int
  schedule   Schedule @relation(fields: [scheduleId], references: [id])
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
}

model Assignment {
  id          Int      @id @default(autoincrement())
  classId     Int
  class       Class    @relation(fields: [classId], references: [id])
  name        String
  description String   @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  Answer      Answer[]
}

model Answer {
  id           Int        @id @default(autoincrement())
  assignmentId Int
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  userId       Int
  user         User       @relation(fields: [userId], references: [id])
  description  String     @default("")
  grade        Float      @default(0.00)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now())
}
